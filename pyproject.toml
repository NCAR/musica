[build-system]
requires = [
  "scikit-build-core>=0.11.0",
  "pybind11>=3.0.0"
]
build-backend = "scikit_build_core.build"

[project]
name = "musica"
dynamic = ["version"]
readme = "README.md"
description = "MUSICA is a Python library for performing computational simulations in atmospheric chemistry."
requires-python = ">=3.9"
authors = [
  { name = "Matthew Dawsom", email = "mattdawson@ucar.edu" },
  { name = "Jiwon Gim", email = "jiwongim@ucar.edu" },
  { name = "David Fillmore", email = "fillmore@ucar.edu" },
  { name = "Kyle Shores", email = "kshores@ucar.edu" },
  { name = "Montek Thind", email = "mthind@ucar.edu" },
]
maintainers = [
  { name = "ACOM MUSICA Developers", email = "musica-support@ucar.edu" },
]
license = { file = "LICENSE" }

dependencies = [
  "numpy>=2.0.0",
  "pyyaml>=6.0.2", 
  "ussa1976>=v0.3.4",
  "xarray>=2022.3.0", 
]

[project.optional-dependencies]
test = [
  "pytest>=7.0.0", 
  "matplotlib>=3.6.0",
]

gpu = [
  "nvidia-cublas-cu12>=12.6.4.1", 
  "nvidia-cuda-runtime-cu12>=12.6.68",
]

tutorial = [
  "dask-jobqueue>=0.8.0",
  "dask[distributed]>=2022.3.0",
  "matplotlib>=3.6.0",
  "numpy>=2.0.0",
  "pandas>=2.2.0",
  "scipy>=1.10.0",
  "seaborn>=0.12.0",
  "python-graphviz", 
]

[project.scripts]
musica-cli = "musica.main:main"

[tool.scikit-build]
# build-dir="python_build"
# on windows, build-type is ignored and must be set with cmake.define.CMAKE_BUILD_TYPE
# cmake.define.CMAKE_BUILD_TYPE = "Debug"
cmake.build-type = "Release"
cmake.define.MUSICA_ENABLE_PYTHON_LIBRARY = "ON"
cmake.define.MUSICA_BUILD_FORTRAN_INTERFACE = "OFF"
cmake.define.MUSICA_ONLY_PYTHON = "ON"
cmake.define.MUSICA_ENABLE_TESTS = "OFF"
cmake.define.CMAKE_POLICY_VERSION_MINIMUM = "3.5"
cmake.define.MUSICA_SET_MICM_DEFAULT_VECTOR_SIZE = "1"
cmake.define.CMAKE_VERBOSE_MAKEFILE = "ON"
build.verbose = true

[[tool.scikit-build.overrides]]
if.platform-system = "linux"
if.any.env.BUILD_GPU = true
inherit.cmake.define = "append"
cmake.define.MUSICA_GPU_TYPE = "all_major"
cmake.define.CMAKE_CUDA_COMPILER = "/usr/local/cuda/bin/nvcc"

# 32 bit linux cannot be built with CUDA support
[[tool.scikit-build.overrides]]
if.platform-system = "linux"
if.platform-machine = "i686"
inherit.cmake.define = "append"
cmake.define.MUSICA_GPU_TYPE = "None"
cmake.define.MUSICA_ENABLE_TUVX = "OFF"
cmake.define.MUSICA_ENABLE_CARMA = "OFF"

# Skip GPU for aarch64 builds
[[tool.scikit-build.overrides]]
if.platform-system = "linux"
if.platform-machine = "aarch64"
inherit.cmake.define = "append"
cmake.define.MUSICA_GPU_TYPE = "None"

[[tool.scikit-build.overrides]]
if.platform-system = "win32"
inherit.cmake.define = "append"
cmake.define.MUSICA_ENABLE_TUVX = "OFF"
cmake.define.MUSICA_ENABLE_CARMA = "OFF"

[project.urls]
homepage = "https://wiki.ucar.edu/display/MUSICA/MUSICA+Home"

# dynamically read the version: https://scikit-build-core.readthedocs.io/en/latest/configuration.html#dynamic-metadata
[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "CMakeLists.txt"
regex = 'musica-distribution VERSION\s+(?P<value>[0-9.]+)'

[[tool.scikit-build.generate]]
path = "musica/_version.py"
template = '''
version = "${version}"
'''

# you can test cibuildwheel on any computer with docker directly. First, make a 
# new python environment and install cibbuildwheel into it
# then, run something like this:
# CIBW_ARCHS=x86_64 CIBW_PLATFORM=linux cibuildwheel --output-dir wheelhouse > log.txt 2>&1
[tool.cibuildwheel]
# Increase pip debugging output
build-verbosity = 3

# Add your desired build configuration
build = ["cp39-*", "cp310-*", "cp311-*", "cp312-*", "cp313-*"]
skip = ["*musllinux*"]

# Set up pre-build hooks
[tool.cibuildwheel.macos]
environment.MACOSX_DEPLOYMENT_TARGET = "15.0"
before-all = "bash python/musica/tools/prepare_build_environment_macos.sh"

[tool.cibuildwheel.linux]
before-all = "python/musica/tools/prepare_build_environment_linux.sh"
repair-wheel-command = "bash python/musica/tools/repair_wheel_gpu.sh {wheel} {dest_dir}"
# Use manylinux_2_28 for modern GCC 8.5 and NetCDF compatibility
manylinux-x86_64-image  = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
manylinux-i686-image    = "manylinux_2_28"

[tool.cibuildwheel.linux.environment]
CUDA_PATH = "/usr/local/cuda"
PATH = "/usr/local/cuda/bin:$PATH"
LD_LIBRARY_PATH = "/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
BUILD_GPU = 1

[tool.cibuildwheel.windows]
