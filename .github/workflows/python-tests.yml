name: Python tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Test Python (${{ matrix.os }}, ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest,  macos-13, macos-latest]
        os: [macos-latest]
        # python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        python-version: ["3.9"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y libnetcdf-dev netcdf-bin libnetcdff-dev liblapack-dev
    
    - name: Install dependencies (macos)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install netcdf netcdf-fortran lapack

    - name: Set up Windows AMD64
      if: matrix.os == 'windows-latest'
      uses: ./.github/windows_amd64_steps

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Add python build tools
      run: python -m pip install --upgrade wheel setuptools build scikit-build-core

    - name: Build wheel (linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        python -m build --wheel --no-isolation --outdir wheelhouse

    - name: Build wheel (macos)
      if: startsWith(matrix.os, 'macos')
      env:
        FC: gfortran-14
        CC: gcc-14
        CXX: g++-14
      run: |
        python -m build --wheel --no-isolation --outdir wheelhouse

    - name: Build wheel (Windows)  
      if: startsWith(matrix.os, 'windows')
      shell: msys2 {0}
      run: |
        MSYS2_PYTHON=$(cygpath -u "$pythonLocation")
        "$MSYS2_PYTHON/python.exe" -m build --wheel --no-isolation --outdir wheelhouse

    - name: Repair wheel (Windows)
      if: startsWith(matrix.os, 'windows')
      shell: msys2 {0}
      run: |
        for whl in wheelhouse/*.whl; do
          bash python/musica/tools/repair_wheel_windows.sh "$whl" wheelhouse
        done

    - name: Install wheel (Windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        $whl = Get-ChildItem -Path "$(pwd)\wheelhouse\*.whl" | Select-Object -First 1
        pip install "$($whl.FullName)[test]"
    
    - name: Install wheel (linux/macos)
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
      run: |
        whl=$(ls wheelhouse/*.whl | head -1)
        pip install "${whl}[test]"
    
    - name: Test 
      run: pytest -s
